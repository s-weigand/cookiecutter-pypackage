{%- set license_classifiers = {
"MIT license": "License :: OSI Approved :: MIT License",
"BSD license": "License :: OSI Approved :: BSD License",
"ISC license": "License :: OSI Approved :: ISC License (ISCL)",
"Apache Software License 2.0": "License :: OSI Approved :: Apache Software License",
"GNU General Public License v3": "License :: OSI Approved :: GNU General Public License v3 (GPLv3)"
} %}
[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]

classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  {%- if cookiecutter.open_source_license in license_classifiers %}
  "{{ license_classifiers[cookiecutter.open_source_license] }}",
  {%- endif %}
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]

{%- if cookiecutter.open_source_license in license_classifiers %}
license = { file = "LICENSE" }
{%- endif %}

dependencies = [
{%- if 'click' == cookiecutter.command_line_interface|lower %}
    "Click>=8.0",
{%- endif %}
{%- if 'typer' == cookiecutter.command_line_interface|lower %}
    "typer>=0.9.0",
{%- endif %}
]
authors = [
  { name = "{{ cookiecutter.full_name.replace('\"', '\\\"') }}", email = "{{ cookiecutter.email }}" },
]
name = "{{ cookiecutter.project_slug }}"
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
keywords = ["{{ cookiecutter.project_slug }}"]
requires-python = ">=3.8"
dynamic = ["version"]

[project.optional-dependencies]
dev = ["{{ cookiecutter.project_slug }}[docs,test]"]
docs = [
  "myst-parser>=0.12",
  "numpydoc>=0.8",
  "Sphinx>=3.2",
  "sphinx-copybutton>=0.3",
  "sphinx-last-updated-by-git>=0.3",
  "sphinx-rtd-theme>=1.2",
  "sphinxcontrib-jquery>=4.1",       # Needed for the search to work Ref.: https://github.com/readthedocs/sphinx_rtd_theme/issues/1434
]
test = [
  "coverage[toml]",
  "pluggy>=0.7",
  "pytest>=3.7.1",
  "pytest-cov>=2.5.1",
]

[project.urls]
Homepage = "{{ cookiecutter.git_host_url}}/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug_url }}"
Documentation = "https://{{ cookiecutter.project_slug_url }}.readthedocs.io"
Changelog = "https://{{ cookiecutter.project_slug_url }}.readthedocs.io/en/latest/changelog.html"
Source = "{{ cookiecutter.git_host_url}}/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug_url }}"
Tracker = "{{ cookiecutter.git_host_url}}/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug_url }}/issues"

{%- if 'typer' == cookiecutter.command_line_interface|lower %}
[project.scripts]
"{{ cookiecutter.project_slug }}" = "{{ cookiecutter.project_slug }}.cli:app"
{%- elif 'no' not in cookiecutter.command_line_interface|lower %}
[project.scripts]
"{{ cookiecutter.project_slug }}" = "{{ cookiecutter.project_slug }}.cli:main"
{%- endif %}


[tool.hatch.version]
path = "{{ cookiecutter.project_slug }}/__init__.py"

[tool.hatch.build.targets.sdist]
include = ["/{{ cookiecutter.project_slug }}"]

[tool.hatch.envs.default]
features = ["dev"]


[tool.black]
line-length = 99
target-version = ['py38', 'py39', 'py310', 'py311']
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
src_paths = ["{{cookiecutter.project_slug}}", "tests"]
line_length = 99
force_single_line = true
remove_redundant_aliases = true

[tool.docformatter]
black = true
wrap-summaries = 99
wrap-descriptions = 99

[tool.interrogate]
exclude = ["docs", "tests"]
ignore-init-module = true
fail-under = 100

[tool.coverage.run]
branch = true
omit = [
  '{{cookiecutter.project_slug}}/__init__.py',
  'tests/*',
  # comment the above line if you want to see if all tests did run
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
  # Have to re-enable the standard pragma
  'pragma: no cover',

  # Don't complain about missing debug-only code:
  'def __repr__',
  'if self\.debug',

  # Don't complain if tests don't hit defensive assertion code:
  'raise AssertionError',
  'raise NotImplementedError',

  # Don't complain if non-runnable code isn't run:
  'if 0:',
  'if __name__ == .__main__.:',
  # only accessible during typechecking
  'if TYPE_CHECKING:',
]


[tool.mypy]
exclude = "^docs/"
ignore_missing_imports = true
scripts_are_modules = true
show_error_codes = true
warn_unused_configs = true
warn_unused_ignores = true
strict_equality = true


# For now this is not used because pydoclint does not support toml when used with flake8
[tool.pydoclint]
skip-checking-short-docstrings = false
style = 'numpy'
exclude = '^(docs/|tests?/)'
require-return-section-when-returning-none = false
allow-init-docstring = true

